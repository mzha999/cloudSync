AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service into an ECS cluster behind a public load balancer.
Parameters:
  StackName:
    Type: String
    Default: crc-dev-universal-vpc
    Description: The name of the parent cluster stack that you created. Necessary
                 to locate and reference resources created by that stack.
  ServiceNameCID:
    Type: String
    Default: crc-dev-admin
    Description: A name for the service
  ContainerCpu:
    Type: Number
    Default: 512
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  PriorityCID:
    Type: Number
    Default: 120
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [ !Equals [!Ref 'Role', ''] ]

Resources:
  TaskDefinitionCID :
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: 'awsvpc'
      Family: !Ref 'ServiceNameCID'
      Cpu: 512
      Memory: 512
      TaskRoleArn:
        Fn::If:
          - 'HasCustomRole'
          - !Ref 'Role'
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref 'ServiceNameCID'
          Cpu: 512
          MemoryReservation: 512
          Image: '307946679112.dkr.ecr.ap-northeast-2.amazonaws.com/crc/admin:dev-latest'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-create-group: 'true'
              awslogs-group: '/ecs/crc/dev-admin'
              awslogs-region: 'ap-northeast-2'
              awslogs-stream-prefix: 'ecs'
          PortMappings:
            - ContainerPort: 8080
          Environment:
            - Name: SPRING_PROFILES_ACTIVE
              Value: 'dev'
            - Name: TZ
              Value: 'Asia/Seoul'
            - Name : NODE_ENV
              Value: 'dev'
        # - Name: 'node'
        #   Cpu: 512
        #   MemoryReservation: 3072
        #   Image: '295967941030.dkr.ecr.ap-northeast-2.amazonaws.com/home-api:latest'
        #   LogConfiguration:
        #     LogDriver: 'awslogs'
        #     Options:
        #       awslogs-create-group: 'true'
        #       awslogs-group: '/ecs/prod-nginx-with-node'
        #       awslogs-region: 'ap-northeast-2'
        #       awslogs-stream-prefix: 'ecs'
        #   PortMappings:
        #     - ContainerPort: 3000
        #       HostPort: 3000 
  ServiceCID:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRuleCID
    Properties:
      ServiceName: !Ref 'ServiceNameCID'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DesiredCount: !Ref 'DesiredCount'
      HealthCheckGracePeriodSeconds: 500
      TaskDefinition: !Ref 'TaskDefinitionCID'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceNameCID'
        # - ContainerName: 'nginx'
          ContainerPort: 8080
          # ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroupCID'
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: 
            - 'sg-077cd137c81aec750'
          Subnets: 
            # PublicSubnetOne&Two
            - 'subnet-0c613c8a0cd82829b'
            - 'subnet-089ac4c08ed28581f'
  TargetGroupCID:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: "ip"
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /actuator/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Ref 'ServiceNameCID'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: "200-499"
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]
  LoadBalancerRuleCID:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroupCID'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: "arn:aws:elasticloadbalancing:ap-northeast-2:307946679112:listener/app/crc-de-Publi-upyvEMaXGapG/7c1023a53a054979/c57533ff626f65dd"
      # Fn::ImportValue:
      #   !Join [':', [!Ref 'StackName', 'PublicListener']] 
      Priority: !Ref 'PriorityCID'
